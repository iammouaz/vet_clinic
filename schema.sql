/* Database schema to keep the structure of entire database. */

CREATE TABLE animals(
  id INT GENERATED BY DEFAULT AS IDENTITY,
   name varchar(100),
   date_of_birth  date     NOT NULL,
   escape_attempts int,
   neutered BOOLEAN,
   weight_kg         DEC,
   PRIMARY KEY (id)
);


-- Add New Column Species

ALTER TABLE animals
ADD species varchar(100);


-- Create New Table Owners

CREATE TABLE owners(
  id INT GENERATED BY DEFAULT AS IDENTITY,
  full_name varchar(50),
  age INT,
  PRIMARY KEY (id)
);

-- Create New Table Species

CREATE TABLE species(
  id INT GENERATED BY DEFAULT AS IDENTITY,
  name varchar(50),
  PRIMARY KEY (id)
);

-- Remove column species from animals

ALTER TABLE animals
DROP COLUMN species;

-- Add column `species_id` which is a foreign key referencing `species` table

ALTER TABLE animals
ADD species_id INT;
ALTER TABLE animals
ADD FOREIGN KEY (species_id) REFERENCES species(id);

-- Add column `owner_id` which is a foreign key referencing the `owners` table

ALTER TABLE animals
ADD owner_id INT;
ALTER TABLE animals 
ADD FOREIGN KEY (owner_id) REFERENCES owners(id);


/* Create a table named vets with the following columns:
id: integer (set it as autoincremented PRIMARY KEY)
name: string
age: integer
date_of_graduation: date
*/
CREATE TABLE vets(
  id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  age INT,
  date_of_graduation DATE
);

/* There is a many-to-many relationship between the tables species and vets: a vet can specialize
in multiple species, and a species can have multiple vets specialized in it. Create a "join table"
called specializations to handle this relationship.
*/
CREATE TABLE specializations(
  species_id INT REFERENCES species(id),
  vet_id INT REFERENCES vets(id)
);

/* There is a many-to-many relationship between the tables animals and vets: an animal can visit
multiple vets and one vet can be visited by multiple animals. Create a "join table" called visits
to handle this relationship, it should also keep track of the date of the visit.
*/
CREATE TABLE visits (
  animal_id INT REFERENCES animals(id),
  vet_id INT REFERENCES vets(id),
  date_of_visit DATE
);


-- Performance audit

-- Add an email column to your owners table
ALTER TABLE owners ADD COLUMN email VARCHAR(120);

-- This will add 3.594.280 visits considering you have 10 animals, 4 vets, and it will use around ~87.000 timestamps (~4min approx.)
INSERT INTO visits (animal_id, vet_id, visit_date) SELECT * FROM (SELECT id FROM animals) animal_ids, (SELECT id FROM vets) vets_ids, generate_series('1980-01-01'::timestamp, '2021-01-01', '4 hours') visit_timestamp;

-- This will add 2.500.000 owners with full_name = 'Owner <X>' and email = 'owner_<X>@email.com' (~2min approx.)
insert into owners (full_name, email) select 'Owner ' || generate_series(1,2500000), 'owner_' || generate_series(1,2500000) || '@mail.com';

-- Optimization to first query.
CREATE INDEX ON visits (animal_id);  
-- Optimization to Second query.
CREATE INDEX ON visits (vet_id);
-- Optimization to Third query.
CREATE INDEX ON OWNERS (email); 
